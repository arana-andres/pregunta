{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","library","add","faRedoAlt","faPlay","faStop","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","toggleButton","complete","_this2","options","strings","typeSpeed","backSpeed","backDelay","onComplete","completeHandler","typed","Typed","el","destroy","setState","reset","stop","start","button","_this3","react_default","a","createElement","react_fontawesome_index_es","className","onClick","togglePlay","icon","style","whiteSpace","ref","resetHandler","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oOCQxCC,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,KACZH,IAAQC,IAAIG,SAuGGC,cApGb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACXC,aAAc,OACdC,UAAU,GALAT,mFASM,IAAAU,EAAAP,KAKZQ,EAAU,CACdC,QAAS,CACP,QACA,uFACA,yDACA,gLACA,yKACA,8EACA,8JACA,wIACA,qFACA,sDACA,0CAEFC,UAAW,GACXC,UAAW,GACXC,UAAW,IACXC,WAAY,kBAAMN,EAAKO,oBAGzBd,KAAKe,MAAQ,IAAIC,IAAMhB,KAAKiB,GAAIT,kDAMhCR,KAAKe,MAAMG,oDAIXlB,KAAKmB,SAAS,CAACd,aAAc,GAAIC,UAAU,2CAI3CN,KAAKe,MAAMK,QAEPpB,KAAKI,MAAME,UACbN,KAAKmB,SAAS,CAACd,aAAc,OAAQC,UAAU,yCAKjB,SAA5BN,KAAKI,MAAMC,cACbL,KAAKe,MAAMM,OAEXrB,KAAKmB,SAAS,CAACd,aAAc,WAG7BL,KAAKe,MAAMO,QAEXtB,KAAKmB,SAAS,CAACd,aAAc,2CAIxB,IACHkB,EADGC,EAAAxB,KAUP,OAPIA,KAAKI,MAAMC,eACbkB,EAASE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAiBC,UAAU,UACVC,QAAS,kBAAMN,EAAKO,cACpBC,KAAMhC,KAAKI,MAAMC,gBAK3CoB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,QACEM,MAAO,CAAEC,WAAY,YACrBC,IAAK,SAAClB,GAASO,EAAKP,GAAKA,MAG7BQ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACZN,EAEDE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAiBC,UAAU,UACVC,QAAS,kBAAMN,EAAKY,gBACpBJ,KAAK,uBA7FhBK,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5b2e068c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Typed from 'typed.js';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlay, faStop, faRedoAlt, faSignLanguage } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faRedoAlt)\nlibrary.add(faPlay)\nlibrary.add(faStop)\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      toggleButton: 'stop',\n      complete: false\n    }\n  }\n\n  componentDidMount() {\n  \t// If you want to pass more options as props, simply add\n    // your desired props to this destructuring assignment.\n    // const { strings } = this.props;\n    // You can pass other options here, such as typing speed, back speed, etc.\n    const options = {\n      strings: [\n        'Hola.',\n        'On October 23, 2018, a girl named Camila liked a guy named \\'Andrew\\' back on OkCupid.',\n        '\\'Andrew\\', who was really Andres, began to talk to her.',\n        'Camila was from Colombia, where she worked in the clinical field. ^650Right now, however, she was in Alexandria, on a journey to explore new places and learn a new language.',\n        'Luckily, she agreed to a request for a date on November 3, 2018. ^650Andres would pick her up in his new car. ^850That he stalled twice in one block after seeing her.',\n        'Cami, I hope you\\'ve enjoyed this little website that I made for you so far.',\n        'You have influenced me in so many positive ways. ^650You\\'re smart, beautiful, and kind. ^650We have many interesting conversations. ^650You bring me peace.',\n        'I\\'m going to have my family over this Friday. ^650My aunts, cousins, brothers, and mom will be there. ^650I want you to be there too.',\n        'But there\\'s a <em>small</em> problem. ^650I don\\'t want to introduce you as Camila.',\n        'I\\'d like to introduce you as my girlfriend, Camila.',\n        'Cami Moran, will you be my girlfriend?'\n      ],\n      typeSpeed: 60,\n      backSpeed: 10,\n      backDelay: 3000,\n      onComplete: () => this.completeHandler()\n    };\n    // this.el refers to the <span> in the render() method\n    this.typed = new Typed(this.el, options);\n  }\n\n  componentWillUnmount() {\n  \t// Make sure to destroy Typed instance on unmounting\n    // to prevent memory leaks\n    this.typed.destroy();\n  }\n\n  completeHandler() {\n    this.setState({toggleButton: '', complete: true})\n  }\n\n  resetHandler() {\n    this.typed.reset()\n    \n    if (this.state.complete) {\n      this.setState({toggleButton: 'stop', complete: false})\n    }\n  }\n\n  togglePlay() {\n    if (this.state.toggleButton === 'stop') {\n      this.typed.stop()\n\n      this.setState({toggleButton: 'play'})\n    } \n    else {\n      this.typed.start()\n\n      this.setState({toggleButton: 'stop'})\n    }\n  }\n\n  render() {\n    let button;\n\n    if (this.state.toggleButton) {\n      button = <FontAwesomeIcon className=\"control\" \n                                onClick={() => this.togglePlay()} \n                                icon={this.state.toggleButton} \n                />\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"type-wrap\">\n            <span\n              style={{ whiteSpace: 'pre-wrap' }}\n              ref={(el) => { this.el = el; }}\n            />\n          </div>\n          <div className=\"control-container\">\n            {button}\n           \n            <FontAwesomeIcon className=\"control\" \n                             onClick={() => this.resetHandler()} \n                             icon=\"redo-alt\" />\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}